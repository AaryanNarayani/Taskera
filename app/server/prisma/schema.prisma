generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid        String     @id @default(uuid())
  username    String     @default("User")
  email       String     @unique
  avatar      String?
  isOnboarded Boolean    @default(false)
  level       Int        @default(1)
  streak      Int        @default(0)
  
  tasks       Task[]
  courses     Course[]
  ownedGroups Group[]    @relation("GroupOwner")
  memberGroups Group[]    @relation("GroupMembers")
  analytics   Analytics?
  availabilities UserAvailability[]
  calendarEvents CalendarEvent[]
}
model UserAvailability {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [uuid])
  
  // Monday availability
  mondayHours     Float?
  mondayStartTime String?  // Store as "HH:MM" format
  mondayEndTime   String?  // Store as "HH:MM" format
  
  // Tuesday availability
  tuesdayHours     Float?
  tuesdayStartTime String?
  tuesdayEndTime   String?
  
  // Wednesday availability
  wednesdayHours     Float?
  wednesdayStartTime String?
  wednesdayEndTime   String?
  
  // Thursday availability
  thursdayHours     Float?
  thursdayStartTime String?
  thursdayEndTime   String?
  
  // Friday availability
  fridayHours     Float?
  fridayStartTime String?
  fridayEndTime   String?
  
  // Saturday availability
  saturdayHours     Float?
  saturdayStartTime String?
  saturdayEndTime   String?
  
  // Sunday availability
  sundayHours     Float?
  sundayStartTime String?
  sundayEndTime   String?
  
  updatedAt DateTime @updatedAt
  
  @@unique([userId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS 
  COMPLETED
}

model Task {
  id           String     @id @default(uuid())
  userId       String
  name         String
  type         String
  priority     Int
  estTime      Int      
  deadline     DateTime
  courseId     String?
  groupId      String?
  timeStudied  Int       @default(0)
  status       TaskStatus @default(TODO)
  subtasks     Subtask[]
  events       CalendarEvent[]
  
  user         User      @relation(fields: [userId], references: [uuid])
  course       Course?   @relation(fields: [courseId], references: [id])
  group        Group?    @relation(fields: [groupId], references: [id])
}

model Subtask {
  id          String   @id @default(uuid())
  taskId      String
  name        String
  isCompleted Boolean  @default(false)
  task        Task     @relation(fields: [taskId], references: [id])
}

model CalendarEvent {
  id          String   @id @default(uuid())
  userId      String
  taskId      String
  title       String
  startTime   DateTime
  endTime     DateTime
  isCompleted Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [uuid])
  task        Task     @relation(fields: [taskId], references: [id])
}

model Course {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [uuid])
  name        String
  description String
  difficulty  Int
  
  tasks       Task[]
  groups      Group[]
}

model Group {
  id            String   @id @default(uuid())
  name          String
  description   String
  courseId      String
  meetingTime   String
  meetingDay    String
  ownerId       String
  pdoroTimer    Boolean  @default(false)
  
  course        Course   @relation(fields: [courseId], references: [id])
  owner         User     @relation("GroupOwner", fields: [ownerId], references: [uuid])
  members       User[]   @relation("GroupMembers")
  tasks         Task[]
}

model Analytics {
  id                 String   @id @default(uuid())
  userId            String   @unique
  totalTime         Int      @default(0)  
  completedTasks    Int      @default(0)
  sessions          Int      @default(0)
  completedSessions Int      @default(0)
  
  user              User     @relation(fields: [userId], references: [uuid])
}